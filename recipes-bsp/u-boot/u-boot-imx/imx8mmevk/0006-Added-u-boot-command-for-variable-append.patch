From 714b886fea2189b69dccaee2c87a05eb317438d7 Mon Sep 17 00:00:00 2001
From: vishnusudhan <vishnusudhan.kj@jasmin-infotech.com>
Date: Wed, 11 Oct 2023 12:27:00 +0530
Subject: [PATCH] Added-u-boot-command-for-variable-append

---
 cmd/Kconfig                  |  7 +++
 cmd/Makefile                 |  1 +
 cmd/mem_misc.c               | 84 ++++++++++++++++++++++++++++++++++++
 configs/imx8mm_evk_defconfig |  1 +
 include/configs/imx8mm_evk.h | 16 ++++++-
 5 files changed, 108 insertions(+), 1 deletion(-)
 create mode 100644 cmd/mem_misc.c

diff --git a/cmd/Kconfig b/cmd/Kconfig
index f6bd71451b..3ce0bc5b2a 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -680,6 +680,13 @@ config CMD_MEMORY
 	    base - print or set address offset
 	    loop - initialize loop on address range
 
+config CMD_APPEND_VAR
+	bool "setvar"
+	help
+		Read the memory by given size and convert value as hex string
+		format and set to bootargs/kernel args variable for user space
+		access
+
 config CMD_MEM_SEARCH
 	bool "ms - Memory search"
 	help
diff --git a/cmd/Makefile b/cmd/Makefile
index 166c652d98..6d97b08784 100644
--- a/cmd/Makefile
+++ b/cmd/Makefile
@@ -92,6 +92,7 @@ obj-$(CONFIG_CMD_LSBLK) += lsblk.o
 obj-$(CONFIG_ID_EEPROM) += mac.o
 obj-$(CONFIG_CMD_MD5SUM) += md5sum.o
 obj-$(CONFIG_CMD_MEMORY) += mem.o
+obj-$(CONFIG_CMD_APPEND_VAR) += mem_misc.o
 obj-$(CONFIG_CMD_IO) += io.o
 obj-$(CONFIG_CMD_MFSL) += mfsl.o
 obj-$(CONFIG_CMD_MII) += mii.o
diff --git a/cmd/mem_misc.c b/cmd/mem_misc.c
new file mode 100644
index 0000000000..c230b2ddff
--- /dev/null
+++ b/cmd/mem_misc.c
@@ -0,0 +1,84 @@
+#include <common.h>
+#include <console.h>
+#include <bootretry.h>
+#include <cli.h>
+#include <command.h>
+#include <console.h>
+#include <flash.h>
+#include <hash.h>
+#include <log.h>
+#include <mapmem.h>
+#include <rand.h>
+#include <watchdog.h>
+#include <asm/global_data.h>
+#include <asm/io.h>
+#include <linux/bitops.h>
+#include <linux/compiler.h>
+#include <linux/ctype.h>
+#include <linux/delay.h>
+
+static int do_mem_misc_setvar(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	ulong addr;
+	ulong size;
+	ulong endianess;
+	int i;
+	uchar data[32];
+	char hex_data[80];
+
+	if (argc != 5)
+	{
+		printf("Usage: %s <variable> <address> <size> <rev>\n", argv[0]);
+		return CMD_RET_USAGE;
+	}
+
+	char *var_name = argv[1];
+	addr = simple_strtoul(argv[2], NULL, 16);
+	size = simple_strtoul(argv[3], NULL, 16);
+	endianess = simple_strtoul(argv[4], NULL, 16);
+ 
+	if (size <= 0 || size > 32)
+	{
+		printf("Invalid size (must be between 1 and 32 bytes)\n");
+		return CMD_RET_FAILURE;
+	}
+
+	if (env_set(var_name, NULL) != 0)
+	{
+		printf("Failed to clear environment variable\n");
+		return CMD_RET_FAILURE;
+	}
+
+	// Read & copy data from memory
+	if (endianess == 0) {
+		for (i = 0; i < size; i++) {
+			data[i] = *(uchar *)(addr + i);
+		}
+
+	} else if (endianess >= 1) {
+		int j = 0;
+		for (i = size - 1; i >= 0 ; i--) {
+			data[j] = *(uchar *)(addr + i);
+			j++;
+		}
+	}
+
+	// Convert binary to hexadecimal string
+	for (i = 0; i < size; i++) {
+	    snprintf(hex_data + i * 2, sizeof(hex_data) - i * 2, "%02x", data[i]);
+	}
+
+        if (env_set(var_name,hex_data ) != 0)
+        {
+            printf("Failed to set environment variable\n");
+            return CMD_RET_FAILURE;
+        }
+	
+    	return CMD_RET_SUCCESS;
+}
+
+/**************************************************/
+U_BOOT_CMD(
+	setvar, 5, 1, do_mem_misc_setvar,
+	"Read memory content and store it in an environment variable passed",
+	"<variable> <address> <size> <rev>");
diff --git a/configs/imx8mm_evk_defconfig b/configs/imx8mm_evk_defconfig
index 0c2cbdb33c..be9ac05edd 100644
--- a/configs/imx8mm_evk_defconfig
+++ b/configs/imx8mm_evk_defconfig
@@ -212,6 +212,7 @@ CONFIG_IMX_HAB=y
 CONFIG_FAT_WRITE=y
 CONFIG_CMD_DEKBLOB=y
 CONFIG_IMX_OPTEE_DEK_ENCAP=y
+CONFIG_CMD_APPEND_VAR=y
 
 CONFIG_CMD_TPM_V1=y
 CONFIG_CMD_TPM_V2=y
diff --git a/include/configs/imx8mm_evk.h b/include/configs/imx8mm_evk.h
index dafeb16f1c..1152fbd0e5 100644
--- a/include/configs/imx8mm_evk.h
+++ b/include/configs/imx8mm_evk.h
@@ -132,6 +132,10 @@
 	"fdt_addr_r=0x43000000\0"			\
 	"fdt_addr=0x43000000\0"			\
 	"fdt_high=0xffffffffffffffff\0"		\
+	"img_start=0x7e0fc0\0" \
+	"srk_header=0x10\0" \
+	"pubkey_len_addr=5\0" \
+	"key_addr=0x88800000\0" \
 	"boot_fit=no\0" \
 	"fdtfile=" CONFIG_DEFAULT_FDT_FILE "\0" \
 	"bootm_size=0x10000000\0" \
@@ -145,7 +149,6 @@
 		"source\0" \
 	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
 	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${fdtfile}\0" \
-	"pcr_hash=6dcd4ce188e63c6c1e43f2de23909e00f1b9142b0c4e449f8a87e1db41e90ab78\0" \
 	"mmcboot=echo Booting from mmc ...; " \
 		"run mmcargs; " \
 		"run do_pcr_extend; " \
@@ -180,6 +183,17 @@
 		"fi;\0" \
 	"do_pcr_extend=echo Verify board_status; " \
 		"if is_sec_state; then " \
+			"setexpr csf_start ${img_start} + 0x18; " \
+			"setvar csf_ptr ${csf_start} 4 1; " \
+			"setexpr csf_hdr_len ${csf_ptr} + 0x1; " \
+			"setvar csf_len ${csf_hdr_len} 2 0; " \
+			"setexpr csf_hdr ${csf_ptr} + ${csf_len}; " \
+			"setexpr pub_key_ptr ${csf_hdr} + ${pubkey_len_addr}; " \
+			"setvar pubkey_len ${pub_key_ptr} 2 0; " \
+			"setexpr key_len ${pubkey_len} - 0xF; " \
+			"setexpr key_offset ${csf_hdr} + ${srk_header}; " \
+			"cp.b ${key_offset} ${key_addr} ${key_len}; " \
+			"hash sha256 ${key_addr} ${key_len} pcr_hash; " \
 			"tpm2 init; " \
 			"tpm2 startup TPM2_SU_CLEAR; " \
 			"tpm2 pcr_extend 16 ${pcr_hash}; " \
